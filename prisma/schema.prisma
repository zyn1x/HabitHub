generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String     @id @default(cuid())
  name            String?
  email           String     @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  habits          Habit[]
  streaks         Streak[]
  friends         Friend[]   @relation("UserFriends")
  friendsOf       Friend[]   @relation("FriendsOfUser")
  achievements    Achievement[]
  notifications   Notification[]
}

model Habit {
  id          String    @id @default(cuid())
  title       String
  description String?
  frequency   String    // "DAILY", "WEEKLY", "MONTHLY", "CUSTOM"
  reminderTime DateTime?
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  streaks     Streak[]
  likes       Like[]
  comments    Comment[]
}

model Streak {
  id        String   @id @default(cuid())
  date      DateTime
  completed Boolean  @default(false)
  habitId   String
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([habitId, date, userId])
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String   @default("#0ea5e9")
  icon      String   @default("sparkles")
  habits    Habit[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friend {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  status    String   @default("pending") // pending, accepted, rejected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend    User     @relation("FriendsOfUser", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}

model Like {
  id        String   @id @default(cuid())
  habitId   String
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([habitId, userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  habitId   String
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Achievement {
  id          String   @id @default(cuid())
  title       String
  description String
  badge       String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([title, userId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  message   String
  read      Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
} 